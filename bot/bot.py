import os
import time
import requests
from dotenv import load_dotenv
from typing import Optional
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from telegram.error import Conflict, NetworkError, TimedOut

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

API_BASE = os.getenv("BACKEND_API_BASE", "http://127.0.0.1:8000/api")
API_KEY = os.getenv("API_SHARED_KEY")
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MOD_IDS = set([int(x) for x in os.getenv("MODERATOR_IDS", "").split(",") if x.strip().isdigit()])
DEFAULT_TAGS = [t.strip() for t in os.getenv("DEFAULT_TAGS", "").split(",") if t.strip()]

TITLE, BODY, TAGS, IMAGE = range(4)

# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ ---
MAIN_TAGS = [
    ("–Ω–æ–≤–æ—Å—Ç–∏", "üì∞ –ù–æ–≤–æ—Å—Ç–∏"),
    ("–æ–±—â–µ—Å—Ç–≤–æ", "üèô –û–±—â–µ—Å—Ç–≤–æ"),
    ("–ø–æ–ª–∏—Ç–∏–∫–∞", "üèõ –ü–æ–ª–∏—Ç–∏–∫–∞"),
    ("—ç–∫–æ–Ω–æ–º–∏–∫–∞", "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞"),
    ("—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
    ("—ç–∫–æ–ª–æ–≥–∏—è", "üåø –≠–∫–æ–ª–æ–≥–∏—è"),
]


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ ===
def is_authorized(user_id: int) -> bool:
    return not MOD_IDS or user_id in MOD_IDS


# === –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ slug –∏–∑ —Å—Å—ã–ª–∫–∏ ===
def extract_slug(text: str) -> str:
    text = text.strip()
    if "#/post/" in text:
        return text.split("#/post/")[-1].split("?")[0].split("#")[0].strip("/")
    if "/post/" in text:
        return text.split("/post/")[-1].split("?")[0].split("#")[0].strip("/")
    return text


# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return ConversationHandler.END
    await update.message.reply_text("üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏.")
    return TITLE


# === –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ ===
async def got_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text.strip()
    await update.message.reply_text("üìù –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (Markdown —Ä–∞–∑—Ä–µ—à—ë–Ω).")
    return BODY


# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ ===
async def got_body(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["body"] = update.message.text or update.message.caption or ""

    # —Å–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫–∏ —Ç–µ–≥–æ–≤
    buttons = [[InlineKeyboardButton(label, callback_data=slug)] for slug, label in MAIN_TAGS]
    buttons.append([InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="done")])

    await update.message.reply_text(
        "üè∑ –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ–≥–æ–≤ (–Ω–∞–∂–∏–º–∞–π—Ç–µ –ø–æ–¥—Ä—è–¥):",
        reply_markup=InlineKeyboardMarkup(buttons),
    )
    context.user_data["tag_slugs"] = []
    return TAGS     # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Ç–µ–≥–æ–≤ ===
async def select_tag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    tag = query.data

    if tag == "done":
        if not context.user_data.get("tag_slugs"):
            context.user_data["tag_slugs"] = DEFAULT_TAGS
        await query.edit_message_text(
            "üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–∞–∫ —Ñ–æ—Ç–æ) –∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
        )
        return IMAGE

    # –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    tags = context.user_data.get("tag_slugs", [])
    if tag not in tags:
        tags.append(tag)
    context.user_data["tag_slugs"] = tags

    selected = ", ".join(tags)
    await query.edit_message_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected}\n\n–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton(label, callback_data=slug)] for slug, label in MAIN_TAGS]
            + [[InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="done")]]
        ),
    )
    return TAGS


# === –ü—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ ===
async def skip_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await publish(update, context, photo_file=None)
    return ConversationHandler.END


# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ ===
async def got_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    file = await photo.get_file()
    photo_path = await file.download_to_drive(custom_path="upload.jpg")
    await publish(update, context, photo_file=str(photo_path))
    try:
        os.remove(str(photo_path))
    except Exception:
        pass
    return ConversationHandler.END


# === –ü—Ä–æ–≤–µ—Ä–∫–∞ backend –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è ===
async def publish(update: Update, context: ContextTypes.DEFAULT_TYPE, photo_file: Optional[str]):
    print("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏...")

    try:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º backend
        ping_url = f"{API_BASE}/posts/?page=1"
        print(f"üåê –ü—Ä–æ–≤–µ—Ä—è—é backend: {ping_url}")

        backend_ready = False
        for attempt in range(3):
            try:
                ping_start = time.time()
                resp = requests.get(ping_url, timeout=10)
                ping_time = round(time.time() - ping_start, 2)
                if resp.ok:
                    print(f"‚úÖ Backend –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ {ping_time}s (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1})")
                    backend_ready = True
                    break
            except requests.exceptions.RequestException as e:
                print(f"üü• –ü–æ–ø—ã—Ç–∫–∞ {attempt+1}: {e}")
            if attempt < 2:
                await update.message.reply_text("üí§ Backend –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è... –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...")
                time.sleep(5)

        if not backend_ready:
            await update.message.reply_text("üü• Backend –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π —á—É—Ç—å –ø–æ–∑–∂–µ.")
            return

        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        data = {
            "title": context.user_data.get("title", "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"),
            "body": context.user_data.get("body", "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"),
            "tag_slugs": context.user_data.get("tag_slugs", DEFAULT_TAGS),
        }
        files = {"cover": open(photo_file, "rb")} if photo_file else None
        headers = {"X-API-KEY": API_KEY}

        print(f"‚û°Ô∏è POST {API_BASE}/posts/ | –¢–µ–≥–∏: {data['tag_slugs']}")
        r = requests.post(f"{API_BASE}/posts/", data=data, files=files, headers=headers, timeout=(10, 30))
        if files:
            files["cover"].close()

        print(f"‚¨ÖÔ∏è –û—Ç–≤–µ—Ç backend: {r.status_code}")

        if r.ok:
            post = r.json()
            FRONTEND_BASE = os.getenv("FRONTEND_BASE", API_BASE.replace("/api", ""))
            url = f"{FRONTEND_BASE}/#/post/{post['slug']}"
            await update.message.reply_text(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ:\n{url}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ({r.status_code}): {r.text[:300]}")

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ publish(): {e}")
        await update.message.reply_text(f"üí• –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
    finally:
        print("‚úÖ publish() –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


# === /delete ===
async def delete_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    text = update.message.text.strip().split(maxsplit=1)
    if len(text) < 2:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <slug –∏–ª–∏ —Å—Å—ã–ª–∫–∞>")
        return

    slug = extract_slug(text[1])
    delete_url = f"{API_BASE}/posts/{slug}/"
    headers = {"X-API-KEY": API_KEY}

    await update.message.reply_text(f"üóë –£–¥–∞–ª—è—é –ø–æ—Å—Ç `{slug}`...", parse_mode="Markdown")

    try:
        resp = requests.delete(delete_url, headers=headers, timeout=10)
        if resp.status_code == 200:
            await update.message.reply_text(f"‚úÖ –ü–æ—Å—Ç `{slug}` —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.", parse_mode="Markdown")
        elif resp.status_code == 404:
            await update.message.reply_text(f"‚ùå –ü–æ—Å—Ç `{slug}` –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        elif resp.status_code == 403:
            await update.message.reply_text("üö´ –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á.")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ ({resp.status_code}): {resp.text[:300]}")
    except Exception as e:
        await update.message.reply_text(f"üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")


# === /cancel ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
    return ConversationHandler.END


# === /status ===
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        r = requests.get(f"{API_BASE}/posts/?page=1", timeout=8)
        if r.ok:
            await update.message.reply_text("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç.")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è Backend –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π ({r.status_code}).")
    except Exception as e:
        await update.message.reply_text(f"üü• Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def build_app():
    app = Application.builder().token(TOKEN).build()

    conv_new = ConversationHandler(
    entry_points=[CommandHandler("new", start)],
    states={
        TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, got_title)],
        BODY: [MessageHandler(filters.TEXT & ~filters.COMMAND, got_body)],
        TAGS: [CallbackQueryHandler(select_tag)],
        IMAGE: [
            CommandHandler("skip", skip_image),
            MessageHandler(filters.PHOTO, got_image),
        ],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
    per_message=True,     # ‚úÖ —Ç–µ–ø–µ—Ä—å inline-–∫–Ω–æ–ø–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –≤—Å–µ–≥–¥–∞
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("delete", delete_post))
    app.add_handler(conv_new)
    return app


# === –ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ backend ===
def wake_backend():
    try:
        print(f"üåê –ü—Ä–æ–±—É—é —Ä–∞–∑–±—É–¥–∏—Ç—å backend: {API_BASE}/posts/?page=1")
        r = requests.get(f"{API_BASE}/posts/?page=1", timeout=10)
        if r.ok:
            print("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω.")
        else:
            print(f"‚ö†Ô∏è Backend –æ—Ç–≤–µ—Ç–∏–ª –∫–æ–¥–æ–º {r.status_code}")
    except Exception as e:
        print(f"‚ö†Ô∏è Backend –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")


# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
if __name__ == "__main__":
    wake_backend()
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")

    while True:
        try:
            app = build_app()
            app.run_polling()
        except Conflict:
            print("‚ö†Ô∏è Conflict: –¥—Ä—É–≥–æ–π –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)
            continue
        except (NetworkError, TimedOut) as e:
            print(f"üåê NetworkError: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
            continue
        except Exception as e:
            print(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)
            continue
