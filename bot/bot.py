import os
import sys
import time
import json
import asyncio
import fcntl
import requests
from dotenv import load_dotenv
from typing import Optional
from telegram import (
    Update,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from telegram.error import Conflict, NetworkError, TimedOut
import boto3

# === –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
load_dotenv()

# === –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ ===
lock_file = "/tmp/bot.lock"
try:
    lock_fd = open(lock_file, "w")
    fcntl.lockf(lock_fd, fcntl.LOCK_EX | fcntl.LOCK_NB)
except IOError:
    print("üö´ –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ.")
    sys.exit(0)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
API_BASE = os.getenv("BACKEND_API_BASE", "http://127.0.0.1:8000/api")
API_KEY = os.getenv("API_SHARED_KEY")
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
DEFAULT_TAGS = [t.strip() for t in os.getenv("DEFAULT_TAGS", "").split(",") if t.strip()]
OWNER_ID = int(os.getenv("OWNER_ID", "0"))

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ S3/R2 ===
S3 = boto3.client(
    "s3",
    endpoint_url=os.getenv("S3_ENDPOINT"),
    aws_access_key_id=os.getenv("S3_ACCESS_KEY"),
    aws_secret_access_key=os.getenv("S3_SECRET_KEY"),
)
S3_BUCKET = os.getenv("S3_BUCKET")
MOD_FILE_KEY = "config/moderators.json"

# === –õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ ===
_cached_mods = set()

def load_moderators():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ R2"""
    global _cached_mods
    try:
        obj = S3.get_object(Bucket=S3_BUCKET, Key=MOD_FILE_KEY)
        data = json.loads(obj["Body"].read().decode())
        _cached_mods = set(data)
        print(f"‚úÖ –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {_cached_mods}")
    except S3.exceptions.NoSuchKey:
        _cached_mods = set()
        print("‚ö†Ô∏è –§–∞–π–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        _cached_mods = set()
    return _cached_mods

def save_moderators():
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ R2"""
    try:
        data = json.dumps(list(_cached_mods), indent=2).encode()
        S3.put_object(
            Bucket=S3_BUCKET,
            Key=MOD_FILE_KEY,
            Body=data,
            ContentType="application/json",
        )
        print("üíæ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤: {e}")

# === –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ===
def is_authorized(user_id: int) -> bool:
    return user_id == OWNER_ID or user_id in _cached_mods

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
TITLE, BODY, TAGS, IMAGE = range(4)

MAIN_TAGS = [
    ("–Ω–æ–≤–æ—Å—Ç–∏", "üì∞ –ù–æ–≤–æ—Å—Ç–∏"),
    ("–æ–±—â–µ—Å—Ç–≤–æ", "üèô –û–±—â–µ—Å—Ç–≤–æ"),
    ("–ø–æ–ª–∏—Ç–∏–∫–∞", "üèõ –ü–æ–ª–∏—Ç–∏–∫–∞"),
    ("—ç–∫–æ–Ω–æ–º–∏–∫–∞", "üí∞ –≠–∫–æ–Ω–æ–º–∏–∫–∞"),
    ("—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"),
    ("—ç–∫–æ–ª–æ–≥–∏—è", "üåø –≠–∫–æ–ª–æ–≥–∏—è"),
]

HELP_MESSAGE = """
üì∞ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞*

–≠—Ç–æ—Ç –±–æ—Ç –ø—É–±–ª–∏–∫—É–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Å–∞–π—Ç **Padua.News**.

üìå *–ö–æ–º–∞–Ω–¥—ã:*
- `/new` ‚Äî –Ω–∞—á–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–æ–≤–æ—Å—Ç–∏  
- `/help` ‚Äî —Å–ø—Ä–∞–≤–∫–∞  
- `/cancel` ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é  
- `/delete <slug>` ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å  
- `/status` ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å backend  

üß© *–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü):*
- `/add_moderator <tg_id>` ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞  
- `/list_moderators` ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤  

üöÄ *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:*
1Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ `/new`  
2Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫  
3Ô∏è‚É£ –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ —Å Markdown)  
4Ô∏è‚É£ –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ `/skip`  
5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—É–±–ª–∏–∫–∞—Ü–∏—é  
"""

# === –ö–æ–º–∞–Ω–¥—ã ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(HELP_MESSAGE, parse_mode="Markdown")

async def add_moderator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != OWNER_ID:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    if not context.args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /add_moderator <telegram_id>")
        return

    try:
        new_mod = int(context.args[0])
    except ValueError:
        await update.message.reply_text("‚ö†Ô∏è ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    if new_mod in _cached_mods:
        await update.message.reply_text("‚úÖ –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.")
        return

    _cached_mods.add(new_mod)
    save_moderators()
    await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_mod} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä.")

async def list_moderators(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("üö´ –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    if not _cached_mods:
        await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
        return
    text = "üë• *–°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:*\n" + "\n".join([f"- `{m}`" for m in sorted(_cached_mods)])
    await update.message.reply_text(text, parse_mode="Markdown")

# === –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ slug ===
def extract_slug(text: str) -> str:
    text = text.strip()
    if "#/post/" in text:
        return text.split("#/post/")[-1].split("?")[0].split("#")[0].strip("/")
    if "/post/" in text:
        return text.split("/post/")[-1].split("?")[0].split("#")[0].strip("/")
    return text

# === /new ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("‚õî –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return ConversationHandler.END
    await update.message.reply_text("üëã –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏.")
    return TITLE

async def got_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["title"] = update.message.text.strip()
    await update.message.reply_text("üìù –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (Markdown —Ä–∞–∑—Ä–µ—à—ë–Ω).")
    return BODY

async def got_body(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["body"] = update.message.text or update.message.caption or ""
    buttons = [[InlineKeyboardButton(label, callback_data=slug)] for slug, label in MAIN_TAGS]
    buttons.append([InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="done")])
    await update.message.reply_text("üè∑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–≥–∏:", reply_markup=InlineKeyboardMarkup(buttons))
    context.user_data["tag_slugs"] = []
    return TAGS

async def select_tag(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    tag = query.data
    await query.answer()
    if tag == "done":
        if not context.user_data.get("tag_slugs"):
            context.user_data["tag_slugs"] = DEFAULT_TAGS
        await query.edit_message_text("üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å.")
        return IMAGE
    tags = context.user_data.get("tag_slugs", [])
    if tag not in tags:
        tags.append(tag)
    context.user_data["tag_slugs"] = tags
    selected = ", ".join(tags) or "–Ω–µ—Ç"
    buttons = [[InlineKeyboardButton(label, callback_data=slug)] for slug, label in MAIN_TAGS]
    buttons.append([InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="done")])
    await query.edit_message_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected}\n\n–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(buttons),
    )
    return TAGS

async def skip_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await publish(update, context, photo_file=None)
    return ConversationHandler.END

async def got_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    photo = update.message.photo[-1]
    file = await photo.get_file()
    photo_path = await file.download_to_drive(custom_path="upload.jpg")
    await publish(update, context, photo_file=str(photo_path))
    try:
        os.remove(str(photo_path))
    except Exception:
        pass
    return ConversationHandler.END

# === –ü—É–±–ª–∏–∫–∞—Ü–∏—è ===
async def publish(update: Update, context: ContextTypes.DEFAULT_TYPE, photo_file: Optional[str]):
    print("üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–∏...")
    try:
        data = {
            "title": context.user_data.get("title", "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"),
            "body": context.user_data.get("body", "(–±–µ–∑ —Ç–µ–∫—Å—Ç–∞)"),
            "tag_slugs": context.user_data.get("tag_slugs", DEFAULT_TAGS),
        }
        files = {"cover": open(photo_file, "rb")} if photo_file else None
        headers = {"X-API-KEY": API_KEY}
        r = requests.post(f"{API_BASE}/posts/", data=data, files=files, headers=headers, timeout=(10, 30))
        if files:
            files["cover"].close()
        if r.ok:
            post = r.json()
            FRONTEND_BASE = os.getenv("FRONTEND_BASE", API_BASE.replace("/api", ""))
            url = f"{FRONTEND_BASE}/#/post/{post['slug']}"
            await update.message.reply_text(f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ:\n{url}")
        else:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ({r.status_code}): {r.text[:300]}")
    except Exception as e:
        await update.message.reply_text(f"üí• –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

# === /delete ===
async def delete_post(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not is_authorized(update.effective_user.id):
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    text = update.message.text.strip().split(maxsplit=1)
    if len(text) < 2:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /delete <slug –∏–ª–∏ —Å—Å—ã–ª–∫–∞>")
        return
    slug = extract_slug(text[1])
    delete_url = f"{API_BASE}/posts/{slug}/"
    headers = {"X-API-KEY": API_KEY}
    resp = requests.delete(delete_url, headers=headers, timeout=10)
    if resp.status_code == 200:
        await update.message.reply_text(f"‚úÖ –ü–æ—Å—Ç `{slug}` —É–¥–∞–ª—ë–Ω.", parse_mode="Markdown")
    else:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è ({resp.status_code}).")

# === /status ===
async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        r = requests.get(f"{API_BASE}/posts/?page=1", timeout=8)
        await update.message.reply_text("‚úÖ Backend –¥–æ—Å—Ç—É–ø–µ–Ω." if r.ok else "‚ö†Ô∏è Backend –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π.")
    except Exception as e:
        await update.message.reply_text(f"üü• Backend –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")

# === /cancel ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏.")
    return ConversationHandler.END

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ===
def build_app():
    app = Application.builder().token(TOKEN).build()
    conv_new = ConversationHandler(
        entry_points=[CommandHandler("new", start)],
        states={
            TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, got_title)],
            BODY: [MessageHandler(filters.TEXT & ~filters.COMMAND, got_body)],
            TAGS: [CallbackQueryHandler(select_tag)],
            IMAGE: [CommandHandler("skip", skip_image), MessageHandler(filters.PHOTO, got_image)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        per_chat=True,
        per_message=False,
    )
    app.add_handler(conv_new)
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("add_moderator", add_moderator))
    app.add_handler(CommandHandler("list_moderators", list_moderators))
    app.add_handler(CommandHandler("delete", delete_post))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("cancel", cancel))
    return app

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
if __name__ == "__main__":
    load_moderators()
    print("ü§ñ –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞...")
    while True:
        try:
            app = build_app()
            app.run_polling()
        except Conflict:
            print("‚ö†Ô∏è Conflict: –¥—Ä—É–≥–æ–π –±–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É 30 —Å–µ–∫—É–Ω–¥...")
            time.sleep(30)
        except (NetworkError, TimedOut) as e:
            print(f"üåê NetworkError: {e}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)
        except Exception as e:
            print(f"üí• –û—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 60 —Å–µ–∫—É–Ω–¥...")
            time.sleep(60)
