import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)

# ================= CONFIG =================
WP_URL = "https://artursafin05032003-nhbzi.wordpress.com"               # –∞–¥—Ä–µ—Å —Å–∞–π—Ç–∞ –±–µ–∑ —Å–ª–µ—à–∞ –≤ –∫–æ–Ω—Ü–µ
WP_USER = "your_wp_username"                 # –ª–æ–≥–∏–Ω WordPress
WP_APP_PASSWORD = "abcd efgh ijkl mnop"      # –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
CATEGORY_ID = 3                              # ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–ù–æ–≤–æ—Å—Ç–∏ –æ –∫–æ—Ç–∞—Ö"
BOT_TOKEN = "–¢–û–ö–ï–ù_–¢–ï–õ–ï–ì–†–ê–ú_–ë–û–¢–ê"           # —Ç–æ–∫–µ–Ω –æ—Ç BotFather
# ==========================================

# --------- 1. –°—Ç–∞—Ä—Ç -----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üê± –Ø –ø–æ–º–æ–≥—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å –æ –∫–æ—Ç–∞—Ö.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏:"
    )
    context.user_data["step"] = "title"

# --------- 2. –ü—Ä–∏—ë–º —Ç–µ–∫—Å—Ç–∞ ----------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("step")

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    if step == "title":
        context.user_data["title"] = update.message.text
        context.user_data["step"] = "content"
        await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏:")
        return

    # –¢–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏
    elif step == "content":
        context.user_data["content"] = update.message.text
        context.user_data["step"] = "media"
        await update.message.reply_text(
            "–•–æ—Ä–æ—à–æ! –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –º–µ–¥–∏–∞
    elif step == "media" and update.message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        context.user_data["step"] = "tags"
        await update.message.reply_text("–î–æ–±–∞–≤—å —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –º–∏–ª–æ—Ç–∞, –ø—É—à–∏—Å—Ç–∏–∫):")
        return

    # –¢–µ–≥–∏
    elif step == "tags":
        tags_text = update.message.text
        tags = [t.strip() for t in tags_text.split(",") if t.strip()]
        context.user_data["tags"] = tags
        await publish_to_wordpress(update, context)
        return

# --------- 3. –ü—Ä–∏—ë–º —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ ----------
async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    step = context.user_data.get("step")

    if step == "media":
        # –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –∏–∑ Telegram
        file = None
        filename = None
        if update.message.photo:
            file = await update.message.photo[-1].get_file()
            filename = "photo.jpg"
        elif update.message.video:
            file = await update.message.video.get_file()
            filename = "video.mp4"

        if file:
            temp_path = f"/tmp/{filename}"
            await file.download_to_drive(temp_path)

            with open(temp_path, "rb") as f:
                headers = {"Content-Disposition": f'attachment; filename={filename}'}
                auth = (WP_USER, WP_APP_PASSWORD)
                res = requests.post(f"{WP_URL}/wp-json/wp/v2/media",
                                    headers=headers, auth=auth,
                                    files={"file": f})
            if res.status_code == 201:
                media_id = res.json()["id"]
                context.user_data["media_id"] = media_id
                await update.message.reply_text("‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
            else:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞.")

        context.user_data["step"] = "tags"
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:")
        return

# --------- 4. –ü—É–±–ª–∏–∫–∞—Ü–∏—è ----------
async def publish_to_wordpress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    title = context.user_data.get("title")
    content = context.user_data.get("content")
    tags_list = context.user_data.get("tags", [])
    media_id = context.user_data.get("media_id")

    # —Å–æ–∑–¥–∞—ë–º (–∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º) —Ç–µ–≥–∏ –ø–æ API
    auth = (WP_USER, WP_APP_PASSWORD)
    tag_ids = []
    for tag in tags_list:
        r = requests.get(f"{WP_URL}/wp-json/wp/v2/tags?search={tag}", auth=auth)
        if r.ok and r.json():
            tag_ids.append(r.json()[0]["id"])
        else:
            r2 = requests.post(f"{WP_URL}/wp-json/wp/v2/tags", auth=auth, json={"name": tag})
            if r2.ok:
                tag_ids.append(r2.json()["id"])

    post_data = {
        "title": title,
        "content": content,
        "status": "pending",       # –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        "categories": [CATEGORY_ID],
        "tags": tag_ids
    }
    if media_id:
        post_data["featured_media"] = media_id

    res = requests.post(f"{WP_URL}/wp-json/wp/v2/posts", auth=auth, json=post_data)

    if res.status_code == 201:
        post = res.json()
        await update.message.reply_text(
            f"‚úÖ –ù–æ–≤–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!\n"
            f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}\n"
            f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä: {post['link']}"
        )
    else:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ WordPress.")
    context.user_data.clear()

# --------- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ----------
def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO | filters.VIDEO, handle_media))
    print("ü§ñ Bot started...")
    app.run_polling()

if __name__ == "__main__":
    main()
